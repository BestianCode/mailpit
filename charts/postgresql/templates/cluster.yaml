apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- with .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" . "context" $ ) | nindent 4 }}
    {{- end }}
  {{- with .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" . "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  imageName: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
  instances: {{ .Values.replicaCount }}
  storage:
    size: {{ .Values.persistence.size }}
    {{- with include "common.storage.class" (dict "persistence" .Values.persistence "global" .Values.global) }}
    storageClass: {{ index (. | fromYaml) "storageClassName" }}
    {{- end }}
  {{- with .Values.bootstrap }}
  bootstrap: {{- include "common.tplvalues.render" ( dict "value" . "context" $ ) | nindent 4 }}
  {{- end }}
  {{- if eq .Values.certificates.mode "cert-manager" }}
  certificates:
    serverTLSSecret: {{ template "common.names.fullname" . }}-server
    serverCASecret: {{ template "common.names.fullname" . }}-server
    clientCASecret: {{ template "common.names.fullname" . }}-replication
    replicationTLSSecret: {{ template "common.names.fullname" . }}-replication
  {{- end }}
  affinity:
    podAntiAffinityType: {{ .Values.affinity.podAntiAffinityType }}
  {{- if and .Values.metrics.enabled .Values.metrics.podMonitor.enabled }}
  monitoring:
    enablePodMonitor: true
  {{- end }}
  {{- if .Values.backup.enabled }}
  backup:
    barmanObjectStore:
      {{- if .Values.backup.s3.enabled }}
      endpointURL: {{ .Values.backup.endpointURL }}
      {{- with .Values.backup.endpointCASecret }}
      endpointCA:
        name: {{ . }}
        key: ca.crt
      {{- end }}
      destinationPath: s3://{{ with .Values.backup.s3.bucketName }}{{ . }}{{ else }}{{ include "common.names.namespace" . }}-{{ template "common.names.fullname" . }}-backup{{ end }}/
      s3Credentials:
        accessKeyId:
          name: {{ if .Values.backup.s3.objectBucketClaim.enabled }}{{ template "common.names.fullname" . }}-backup{{ else }}{{ .Values.backup.s3.existingSecret }}{{ end }}
          key: AWS_ACCESS_KEY_ID
        secretAccessKey:
          name: {{ if .Values.backup.s3.objectBucketClaim.enabled }}{{ template "common.names.fullname" . }}-backup{{ else }}{{ .Values.backup.s3.existingSecret }}{{ end }}
          key: AWS_SECRET_ACCESS_KEY
      {{- end }}
    retentionPolicy: {{ .Values.backup.retentionPolicy | quote }}
  {{- end }}
